#-- DISCLAIMER OF LIABILITY
#--
#-- This file contains proprietary and confidential information of
#-- Xilinx, Inc. ("Xilinx"), that is distributed under a license
#-- from Xilinx, and may be used, copied and/or disclosed only
#-- pursuant to the terms of a valid license agreement with Xilinx.
#--
#-- XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
#-- ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
#-- EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
#-- LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
#-- MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
#-- does not warrant that functions included in the Materials will
#-- meet the requirements of Licensee, or that the operation of the
#-- Materials will be uninterrupted or error-free, or that defects
#-- in the Materials will be corrected. Furthermore, Xilinx does
#-- not warrant or make any representations regarding use, or the
#-- results of the use, of the Materials in terms of correctness,
#-- accuracy, reliability or otherwise.
#--
#-- Xilinx products are not designed or intended to be fail-safe,
#-- or for use in any application requiring fail-safe performance,
#-- such as life-support or safety devices or systems, Class III
#-- medical devices, nuclear facilities, applications related to
#-- the deployment of airbags, or any other applications that could
#-- lead to death, personal injury or severe property or
#-- environmental damage (individually and collectively, "critical
#-- applications"). Customer assumes the sole risk and liability
#-- of any use of Xilinx products in critical applications,
#-- subject only to applicable laws and regulations governing
#-- limitations on product liability.
#--
#-- Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
#--
#-- This disclaimer and copyright notice must be retained as part
#-- of this file at all times.
#--
###################################################################
##
## Name     : plbv46_opb_bridge
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN plbv46_opb_bridge

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION STYLE = HDL
OPTION DESC = PLBV46 to OPB Bridge
OPTION LONG_DESC = PLBV46 to OPB bridge.
OPTION IP_GROUP = Bus and Bridge:MICROBLAZE:PPC
OPTION ARCH_SUPPORT_MAP = (aspartan3=SUPERSEDED, spartan3=SUPERSEDED, spartan3an=SUPERSEDED, spartan3a=SUPERSEDED, spartan3e=SUPERSEDED, spartan3adsp=SUPERSEDED, virtex4lx=SUPERSEDED, virtex4sx=SUPERSEDED, virtex4fx=SUPERSEDED, virtex5lx=SUPERSEDED, virtex5sx=SUPERSEDED, virtex5fx=SUPERSEDED, aspartan3e=SUPERSEDED, aspartan3a=SUPERSEDED, aspartan3adsp=SUPERSEDED ,virtex6lx=AVAILABLE)
OPTION RUN_NGCBUILD = FALSE


## Bus Interfaces
BUS_INTERFACE BUS = SPLB, BUS_TYPE = SLAVE, BUS_STD = PLBV46
BUS_INTERFACE BUS = MOPB, BUS_TYPE = MASTER, BUS_STD = OPB

## Generics for VHDL or Parameters for Verilog
PARAMETER C_NUM_ADDR_RNG = 1, DT = INTEGER, RANGE = (1:4)
PARAMETER C_RNG0_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_RNG0_HIGHADDR, BUS = SPLB, BRIDGE_TO = MOPB, ISVALID = (C_NUM_ADDR_RNG>=1), ASSIGNMENT = REQUIRE
PARAMETER C_RNG0_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_RNG0_BASEADDR, BUS = SPLB, BRIDGE_TO = MOPB, ISVALID = (C_NUM_ADDR_RNG>=1), ASSIGNMENT = REQUIRE
PARAMETER C_RNG1_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_RNG1_HIGHADDR, BUS = SPLB, BRIDGE_TO = MOPB, ISVALID = (C_NUM_ADDR_RNG>=2), ASSIGNMENT = REQUIRE
PARAMETER C_RNG1_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_RNG1_BASEADDR, BUS = SPLB, BRIDGE_TO = MOPB, ISVALID = (C_NUM_ADDR_RNG>=2), ASSIGNMENT = REQUIRE
PARAMETER C_RNG2_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_RNG2_HIGHADDR, BUS = SPLB, BRIDGE_TO = MOPB, ISVALID = (C_NUM_ADDR_RNG>=3), ASSIGNMENT = REQUIRE
PARAMETER C_RNG2_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_RNG2_BASEADDR, BUS = SPLB, BRIDGE_TO = MOPB, ISVALID = (C_NUM_ADDR_RNG>=3), ASSIGNMENT = REQUIRE
PARAMETER C_RNG3_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_RNG3_HIGHADDR, BUS = SPLB, BRIDGE_TO = MOPB, ISVALID = (C_NUM_ADDR_RNG>=4), ASSIGNMENT = REQUIRE
PARAMETER C_RNG3_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_RNG3_BASEADDR, BUS = SPLB, BRIDGE_TO = MOPB, ISVALID = (C_NUM_ADDR_RNG>=4), ASSIGNMENT = REQUIRE
PARAMETER C_SPLB_P2P = 0, DT = INTEGER, BUS = SPLB
PARAMETER C_SPLB_MID_WIDTH = 3, DT = INTEGER, BUS = SPLB
PARAMETER C_SPLB_NUM_MASTERS = 8, DT = INTEGER, BUS = SPLB
PARAMETER C_SPLB_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB
PARAMETER C_SPLB_DWIDTH = 32, DT = INTEGER, BUS = SPLB
PARAMETER C_SPLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SPLB, TYPE = NON_HDL
PARAMETER C_SPLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_BUS_CLOCK_PERIOD_RATIO = 1, DT = INTEGER, RANGE = (1:2), VALUES = (1= 1:1 ratio , 2= 1:2 plb to opb ratio )
PARAMETER C_FAMILY = virtex4, DT = STRING

## Ports
PORT SPLB_Clk = "", DIR = I, BUS = SPLB, SIGIS = CLK
PORT SPLB_Rst = SPLB_Rst, DIR = I, BUS = SPLB
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_SPLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB
PORT PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB
PORT PLB_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT OPB_Clk = "", DIR = I, BUS = MOPB
PORT OPB_Rst = OPB_Rst, DIR = I, BUS = MOPB
PORT Mn_request = M_request, DIR = O, BUS = MOPB
PORT Mn_busLock = M_busLock, DIR = O, BUS = MOPB
PORT Mn_select = M_select, DIR = O, BUS = MOPB
PORT Mn_RNW = M_RNW, DIR = O, BUS = MOPB
PORT Mn_BE = M_BE, DIR = O, VEC = [0:3], BUS = MOPB
PORT Mn_seqAddr = M_seqAddr, DIR = O, BUS = MOPB
PORT Mn_DBus = M_DBus, DIR = O, VEC = [0:31], BUS = MOPB
PORT Mn_ABus = M_ABus, DIR = O, VEC = [0:31], BUS = MOPB
PORT OPB_MGrant = OPB_MGrant, DIR = I, BUS = MOPB
PORT OPB_xferAck = OPB_xferAck, DIR = I, BUS = MOPB
PORT OPB_errAck = OPB_errAck, DIR = I, BUS = MOPB
PORT OPB_retry = OPB_retry, DIR = I, BUS = MOPB
PORT OPB_timeout = OPB_timeout, DIR = I, BUS = MOPB
PORT OPB_DBus = OPB_DBus, DIR = I, VEC = [0:31], BUS = MOPB

END
