-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity acc_vadd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sI1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    sI1_TVALID : IN STD_LOGIC;
    sI1_TREADY : OUT STD_LOGIC;
    sI2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    sI2_TVALID : IN STD_LOGIC;
    sI2_TREADY : OUT STD_LOGIC;
    mO1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    mO1_TVALID : OUT STD_LOGIC;
    mO1_TREADY : IN STD_LOGIC );
end;


architecture behav of acc_vadd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "acc_vadd,hls_ip_2014_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.600000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_sig_bdd_23 : BOOLEAN;
    signal ap_sig_ioackin_mO1_TREADY : STD_LOGIC;
    signal ap_reg_ioackin_mO1_TREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_48 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_mO1_TREADY assign process. --
    ap_reg_ioackin_mO1_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_mO1_TREADY <= ap_const_logic_0;
            else
                if ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then
                    if (not((ap_sig_bdd_23 or (ap_const_logic_0 = ap_sig_ioackin_mO1_TREADY)))) then 
                        ap_reg_ioackin_mO1_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_48) then 
                        ap_reg_ioackin_mO1_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_23, ap_sig_ioackin_mO1_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(sI1_TVALID, sI2_TVALID)
    begin
                ap_sig_bdd_23 <= ((sI1_TVALID = ap_const_logic_0) or (sI2_TVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_48 assign process. --
    ap_sig_bdd_48_assign_proc : process(mO1_TREADY, ap_sig_bdd_23)
    begin
                ap_sig_bdd_48 <= (not(ap_sig_bdd_23) and (ap_const_logic_1 = mO1_TREADY));
    end process;


    -- ap_sig_ioackin_mO1_TREADY assign process. --
    ap_sig_ioackin_mO1_TREADY_assign_proc : process(mO1_TREADY, ap_reg_ioackin_mO1_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mO1_TREADY)) then 
            ap_sig_ioackin_mO1_TREADY <= mO1_TREADY;
        else 
            ap_sig_ioackin_mO1_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    mO1_TDATA <= std_logic_vector(unsigned(sI2_TDATA) + unsigned(sI1_TDATA));

    -- mO1_TVALID assign process. --
    mO1_TVALID_assign_proc : process(ap_CS_fsm, ap_sig_bdd_23, ap_reg_ioackin_mO1_TREADY)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_23) and (ap_const_logic_0 = ap_reg_ioackin_mO1_TREADY))) then 
            mO1_TVALID <= ap_const_logic_1;
        else 
            mO1_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- sI1_TREADY assign process. --
    sI1_TREADY_assign_proc : process(ap_CS_fsm, ap_sig_bdd_23, ap_sig_ioackin_mO1_TREADY)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_sig_bdd_23 or (ap_const_logic_0 = ap_sig_ioackin_mO1_TREADY))))) then 
            sI1_TREADY <= ap_const_logic_1;
        else 
            sI1_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- sI2_TREADY assign process. --
    sI2_TREADY_assign_proc : process(ap_CS_fsm, ap_sig_bdd_23, ap_sig_ioackin_mO1_TREADY)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_sig_bdd_23 or (ap_const_logic_0 = ap_sig_ioackin_mO1_TREADY))))) then 
            sI2_TREADY <= ap_const_logic_1;
        else 
            sI2_TREADY <= ap_const_logic_0;
        end if; 
    end process;

end behav;
