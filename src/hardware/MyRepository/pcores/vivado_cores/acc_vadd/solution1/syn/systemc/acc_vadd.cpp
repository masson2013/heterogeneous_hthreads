// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "acc_vadd.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic acc_vadd::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic acc_vadd::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> acc_vadd::ap_ST_st1_fsm_0 = "0";

acc_vadd::acc_vadd(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_sig_bdd_23);
    sensitive << ( sI1_TVALID );
    sensitive << ( sI2_TVALID );

    SC_METHOD(thread_ap_sig_bdd_48);
    sensitive << ( mO1_TREADY );
    sensitive << ( ap_sig_bdd_23 );

    SC_METHOD(thread_ap_sig_ioackin_mO1_TREADY);
    sensitive << ( mO1_TREADY );
    sensitive << ( ap_reg_ioackin_mO1_TREADY );

    SC_METHOD(thread_mO1_TDATA);
    sensitive << ( sI1_TDATA );
    sensitive << ( sI2_TDATA );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_23 );

    SC_METHOD(thread_mO1_TVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_23 );
    sensitive << ( ap_reg_ioackin_mO1_TREADY );

    SC_METHOD(thread_sI1_TREADY);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_23 );
    sensitive << ( ap_sig_ioackin_mO1_TREADY );

    SC_METHOD(thread_sI2_TREADY);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_23 );
    sensitive << ( ap_sig_ioackin_mO1_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_23 );
    sensitive << ( ap_sig_ioackin_mO1_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0";
    ap_reg_ioackin_mO1_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "acc_vadd_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, sI1_TDATA, "(port)sI1_TDATA");
    sc_trace(mVcdFile, sI1_TVALID, "(port)sI1_TVALID");
    sc_trace(mVcdFile, sI1_TREADY, "(port)sI1_TREADY");
    sc_trace(mVcdFile, sI2_TDATA, "(port)sI2_TDATA");
    sc_trace(mVcdFile, sI2_TVALID, "(port)sI2_TVALID");
    sc_trace(mVcdFile, sI2_TREADY, "(port)sI2_TREADY");
    sc_trace(mVcdFile, mO1_TDATA, "(port)mO1_TDATA");
    sc_trace(mVcdFile, mO1_TVALID, "(port)mO1_TVALID");
    sc_trace(mVcdFile, mO1_TREADY, "(port)mO1_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_23, "ap_sig_bdd_23");
    sc_trace(mVcdFile, ap_sig_ioackin_mO1_TREADY, "ap_sig_ioackin_mO1_TREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_mO1_TREADY, "ap_reg_ioackin_mO1_TREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_48, "ap_sig_bdd_48");
#endif

    }
    mHdltvinHandle.open("acc_vadd.hdltvin.dat");
    mHdltvoutHandle.open("acc_vadd.hdltvout.dat");
}

acc_vadd::~acc_vadd() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void acc_vadd::thread_ap_clk_no_reset_() {
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_mO1_TREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) {
            if (!(ap_sig_bdd_23.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_mO1_TREADY.read()))) {
                ap_reg_ioackin_mO1_TREADY = ap_const_logic_0;
            } else if (ap_sig_bdd_48.read()) {
                ap_reg_ioackin_mO1_TREADY = ap_const_logic_1;
            }
        }
    }
}

void acc_vadd::thread_ap_sig_bdd_23() {
    ap_sig_bdd_23 = (esl_seteq<1,1,1>(sI1_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(sI2_TVALID.read(), ap_const_logic_0));
}

void acc_vadd::thread_ap_sig_bdd_48() {
    ap_sig_bdd_48 = (!ap_sig_bdd_23.read() && esl_seteq<1,1,1>(ap_const_logic_1, mO1_TREADY.read()));
}

void acc_vadd::thread_ap_sig_ioackin_mO1_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mO1_TREADY.read())) {
        ap_sig_ioackin_mO1_TREADY = mO1_TREADY.read();
    } else {
        ap_sig_ioackin_mO1_TREADY = ap_const_logic_1;
    }
}

void acc_vadd::thread_mO1_TDATA() {
    mO1_TDATA = (!sI2_TDATA.read().is_01() || !sI1_TDATA.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sI2_TDATA.read()) + sc_biguint<32>(sI1_TDATA.read()));
}

void acc_vadd::thread_mO1_TVALID() {
    if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !ap_sig_bdd_23.read() && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mO1_TREADY.read()))) {
        mO1_TVALID = ap_const_logic_1;
    } else {
        mO1_TVALID = ap_const_logic_0;
    }
}

void acc_vadd::thread_sI1_TREADY() {
    if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !(ap_sig_bdd_23.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_mO1_TREADY.read())))) {
        sI1_TREADY = ap_const_logic_1;
    } else {
        sI1_TREADY = ap_const_logic_0;
    }
}

void acc_vadd::thread_sI2_TREADY() {
    if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !(ap_sig_bdd_23.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_mO1_TREADY.read())))) {
        sI2_TREADY = ap_const_logic_1;
    } else {
        sI2_TREADY = ap_const_logic_0;
    }
}

void acc_vadd::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void acc_vadd::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sI1_TDATA\" :  \"" << sI1_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sI1_TVALID\" :  \"" << sI1_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"sI1_TREADY\" :  \"" << sI1_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sI2_TDATA\" :  \"" << sI2_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sI2_TVALID\" :  \"" << sI2_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sI2_TREADY\" :  \"" << sI2_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mO1_TDATA\" :  \"" << mO1_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mO1_TVALID\" :  \"" << mO1_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mO1_TREADY\" :  \"" << mO1_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

